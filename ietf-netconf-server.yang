module ietf-netconf-server {

  namespace "urn:ietf:params:xml:ns:yang:ietf-netconf-server";
  prefix "ncserver";

  import ietf-inet-types {
    prefix inet;                // RFC 6991
  }
 
  organization
   "IETF NETCONF (Network Configuration) Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/netconf/>
    WG List:  <mailto:netconf@ietf.org>

    WG Chair: Mehmet Ersue
              <mailto:mehmet.ersue@nsn.com>

    WG Chair: Bert Wijnen
              <mailto:bertietf@bwijnen.net>

    Editor:   Kent Watsen
              <mailto:kwatsen@juniper.net>";


  description
   "This module contains a collection of YANG definitions for
    configuring NETCONF servers.

    Copyright (c) 2014 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD
    License set forth in Section 4.c of the IETF Trust's
    Legal Provisions Relating to IETF Documents
    (http://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC XXXX; see
    the RFC itself for full legal notices.";
  // RFC Ed.: replace XXXX with actual RFC number and
  // remove this note

  // RFC Ed.: please update the date to the date of publication

  revision "2014-01-24" {
    description
     "Initial version";
    reference
     "RFC XXXX: NETCONF Server Configuration Model";
  }


  // Features

  feature ssh-listen {
    description
     "The ssh-listen feature indicates that the NETCONF server can
      open a port to listen for incoming client connections.";
  }

  feature ssh-call-home {
    description
     "The ssh-call-home feature indicates that the NETCONF server can
      connect to a client.";
    reference
     "RFC XXXX: Reverse Secure Shell (Reverse SSH)";
  }

  feature tls-listen {
    description
     "The tls-listen feature indicates that the NETCONF server can
      open a port to listen for incoming client connections.";
  }

  feature tls-call-home {
    description
     "The tls-call-home feature indicates that the NETCONF server can
      connect to a client.";
  }


  // Module's top-level container 
  container netconf-server {
    description
      "Top-level container for NETCONF server configuration.";
    list listen {
      key name;
      description
        "List of endpoints to listen for connections on.";
      //if-feature "(ssh-listen or tls-listen)";
      uses listen-config;
    }
    list call-home {
      key name;
      description
        "List of applications to call-home to.";
      //if-feature "(ssh-call-home or tls-call-home)";
      uses call-home-config;
    }
  }



  // Groupings

  grouping listen-config {
    description
      "Grouping for listen configuration.";
    leaf name {
      type string;
      description
        "An arbitrary name for the listen endpoint.";
    }
    choice transport {
      mandatory true;
      description
        "Selects between SSH and TLS transports.";
      case ssh {
        if-feature ssh-listen;
        container ssh {
          description
            "SSH-specific listening configuration for inbound
             connections.";
          uses listen-per-transport-config {
            refine port {
              default 830;
            }
          }
        }
      }
      case tls {
        if-feature tls-listen;
        container tls {
          description
            "TLS-specific listening configuration for inbound
             connections.";
          uses listen-per-transport-config {
            refine port {
              default 6513;
            }
          }
        }
      }
    }
  }

  grouping listen-per-transport-config {
    description
      "Provides the configuration of the NETCONF server to
       open one or more ports to listen for incoming client
       connections.";
    leaf address {
      type inet:host;
      mandatory true;
      description
       "The local IP address/name of the interface to listen on.";
    }
    leaf port {
      type inet:port-number;
      description
       "The local port number on this interface the
        NETCONF server listens on.";
    }
  }

  grouping call-home-config {
    description
      "Grouping for call-home configuration.";
    leaf name {
      type string;
      description
        "An arbitrary name for the remote application.";
    }
    uses call-home-transport-config;
    uses call-home-connection-type-config;
    uses call-home-reconnection-strategy-config;
  }

  grouping call-home-transport-config {
    description
      "Grouping for call-home specific transport selection.";
    choice transport {
      mandatory true;
      description
        "Selects between SSH and TLS transports.";
      case ssh {
        if-feature ssh-call-home;
        container ssh {
          description
            "Specifies SSH-specific call-home transport
             configuration.";
          uses call-home-per-transport-config {
            refine endpoints/endpoint/port {
              default 9999;  // pending IANA assignment
            }
          }
          list host-key {
            key name;
            min-elements 1;
            ordered-by user;
            description
              "User-ordered list of host-keys the SSH server
               should advertize.";
            leaf name {
              type string;
              mandatory true;
              description
                "The name of a host key the device should 
                 advertise during the SSH key exchange.";
            }
          }
        }
      }
      case tls {
        if-feature tls-call-home;
        container tls {
          description
            "Specifies TLS-specific call-home transport
             configuration.";
          uses call-home-per-transport-config {
            refine endpoints/endpoint/port {
              default 9999;  // pending IANA assignment
            }
          }
        }
      }
    }
  }

  grouping call-home-per-transport-config {
    description
      "Grouping for transport-specific configuration for
       call-home connections.";
    container endpoints {
      description
        "Container for the list of endpoints.";
      list endpoint {
        key name;
        min-elements 1;
        ordered-by user;
        description
          "User-ordered list of endpoints for this application.
           Defining more than one enables high-availability.";
        leaf name {
          type string;
          description
            "An arbitrary name for the endpoint to connect to.";
        }
        leaf address {
          type inet:host;
          mandatory true;
          description
           "The hostname or IP address of the endpoint.
           If a hostname is provided and DNS resolves to
           more than one IP address, the device SHOULD
           try all of the ones it can based on how its
           networking stack is configured (e.g. v4, v6, 
           dual-stack).";
        }
        leaf port {
          type inet:port-number;
          description
           "The IP port for this endpoint. The device will use
            the IANA-assigned well-known port if not specified.";
        }
      }
    }
  }


  grouping call-home-connection-type-config {
    description
      "Grouping to define connection-type for call-home 
       based connections.";
    container connection-type {
      description
       "Indicates the network manager's preference for how the
        device's connection is maintained.";
      choice connection-type {
        default persistent-connection;
        description
          "Selects between persistent and periodic connections.";
        case persistent-connection {
          container persistent {
            description
             "Maintain a persistent connection to the
              network manager. If the connection goes down,
              immediately start trying to reconnect to it,
              using the reconnection strategy.

              This connection type minimizes any
              manager-to-device data-transfer delay,
              albeit at the expense of holding resources
              longer.";
            container keep-alives {
              description
                "Configures keep-alive policy, to proactively
                 detect when a persistent connection to an
                 endpoint has dropped.";
              leaf interval-secs {
                type uint8;
                units seconds;
                default 15;
                description
                 "Sets a timeout interval in seconds after which
                  if no data has been received from the manager's
                  endpoint, a message will be sent to request a
                  response from the endpoint.  A value of '0' 
                  indicates that no keep-alive messages should 
                  be sent.";
              }
              leaf count-max {
                type uint8;
                default 3;
                description
                 "Sets the number of keep-alive messages that may
                  be sent without receiving any data from the
                  manager's endpoint before assuming the endpoint
                  is no longer alive.  If this threshold is 
                  reached, the transport-level connection will be
                  disconnected (thus triggering the reconnection
                  strategy).  The interval timer is reset after
                  each transmission, thus an unresponsive
                  endpoint will be disconnected after about
                  count-max * interval-secs seconds.";
              }
            }
          }
        }
        case periodic-connection {
          container periodic {
            description
             "Periodically connect to network manager, using the
              reconnection strategy, so it can flush any pending
              data it may be holding. This connection type
              minimizes resources held open, albeit at the
              expense of longer manager-to-device data-transfer 
              delay.  Note that for device-to-manager data, the 
              data should be sent immediately, connecting to 
              network manager first if not already.";
            leaf timeout-mins {
              type uint8;
              units minutes;
              default 5;
              description
               "The maximum amount of unconnected time the
                device will wait until establishing a
                connection to the network manager again. The
                device MAY establish a connection before this
                time if it has data it needs to send to the
                network manager. Note: this value differs from
                the reconnection strategy's interval-secs
                value.";
            }
            leaf linger-secs {
              type uint8;
              units seconds;
              default 30;
              description
               "The amount of time the device should wait after
                last receiving data from or sending data to the
                network manager's endpoint before closing its 
                connection to it.  This is an optimization to 
                prevent unnecessary connections.";
            }
          }
        }
      }
    }
  }

  grouping call-home-reconnection-strategy-config {
    description
      "Grouping for reconnection strategy.";
    container reconnect-strategy {
      description
       "The reconnection strategy guides how a device reconnects
        to an application, after losing a connection to it, 
        even if due to a reboot.  The device starts with the 
        specified endpoint, tries to connect to it count-max 
        times, waiting interval-secs between each connection
        attempt, before trying the next endpoint in the list 
        (round robin).";
      leaf start-with {
        type enumeration {
          enum first-listed {
            description
              "Indicates that reconnections should start with
               the first endpoint listed.";
          }
          enum last-connected { 
            description
              "Indicates that reconnections should start with
               the endpoint last connected to.";
          }
        }
        default first-listed;
        description
         "Specifies which of the application's endpoints the
          device should start with when trying to connect to
          the application.  If no previous connection has
          ever been established, last-connected defaults to
          the first endpoint listed.";
      }
      leaf interval-secs {
        type uint8;
        units seconds;
        default 5;
        description
         "Specifies the time delay between connection attempts
          to the same endpoint.  Note: this value differs from
          the periodic-connection's timeout-mins value.";
      }
      leaf count-max {
        type uint8;
        default 3;
        description
         "Specifies the number times the device tries to
          connect to a specific endpoint before moving on to
          the next endpoint in the list (round robin).";
      }
    }
  }

}
