<?xml version='1.0'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc4252 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4252.xml">
<!ENTITY rfc4253 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4253.xml">
<!ENTITY rfc5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY rfc6020 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6020.xml">
<!ENTITY rfc6187 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6187.xml">
<!ENTITY rfc6241 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6241.xml">
<!ENTITY rfc6242 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6242.xml">
<!ENTITY rfc6335 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6335.xml">
<!ENTITY rfc6536 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6536.xml">
<!ENTITY rfc6991 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6991.xml">
<!ENTITY rfc7407 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7407.xml">
<!ENTITY rfc7589 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7589.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->

<rfc category="std"
     ipr="trust200902"
     docName="draft-ietf-netconf-server-model-latest" >
    <front>
        <title abbrev="NETCONF/RESTCONF Server Config Models">NETCONF Server and RESTCONF Server Configuration Models</title>
        <author initials="K.W." surname="Watsen" fullname="Kent Watsen">
            <organization>Juniper Networks</organization>
            <address>
                <email>kwatsen@juniper.net</email>
            </address>
        </author>
        <author initials="J.S." surname="Schoenwaelder" fullname="Juergen Schoenwaelder">
            <organization>Jacobs University Bremen</organization>
            <address>
                <email>j.schoenwaelder@jacobs-university.de</email>
            </address>
        </author>
        <date/>
        <area>Operations</area>
        <workgroup>NETCONF Working Group</workgroup>
        <abstract>
            <t>This draft defines a NETCONF server configuration data model and a RESTCONF 
            server configuration data model.  These data models enable configuration of 
            the NETCONF and RESTCONF services themselves, including which transports are
            supported, what ports the servers listen on, call-home parameters, client
            authentication, and other related configuration parameters.</t>
        </abstract>
        <note title="Editorial Note (To be removed by RFC Editor)">
          <t>This draft contains many placeholder values that need to be replaced
          with finalized values at the time of publication.  This note summarizes
          all of the substitutions that are needed.  Please note that no other
          RFC Editor instructions are specified anywhere else in this document.</t>

          <t>This document contains references to other drafts in progress, both in
          the Normative References section, as well as in body text throughout.  
          Please update the following references to reflect their final RFC assignments:
            <list style="symbols">
              <t>draft-ietf-netconf-restconf</t>
              <t>draft-ietf-netconf-call-home</t>
            </list>
          </t>
          <t>Artwork in this document contains shorthand references to drafts in 
          progress.  Please apply the following replacements:
            <list  style="symbols">
              <t><spanx style="verb">VVVV</spanx> --&gt; the assigned RFC value for this draft</t>
              <t><spanx style="verb">XXXX</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-restconf</t>
              <t><spanx style="verb">YYYY</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-call-home</t>
              <t><spanx style="verb">ZZZZ</spanx> --&gt; the assigned RFC value for draft-thomson-httpbis-cant</t>
            </list>
          </t>
          <t>Artwork in this document contains placeholder values for ports pending IANA assignment
          from "draft-ietf-netconf-call-home".  Please apply the following replacements:
            <list  style="symbols">
              <t><spanx style="verb">7777</spanx> --&gt; the assigned port value for "netconf-ch-ssh"</t>
              <t><spanx style="verb">8888</spanx> --&gt; the assigned port value for "netconf-ch-tls"</t>
              <t><spanx style="verb">9999</spanx> --&gt; the assigned port value for "restconf-ch-tls"</t>
            </list>
          </t>
          <t>Artwork in this document contains placeholder values for the date of publication of this
          draft.  Please apply the following replacement:
            <list  style="symbols">
              <t><spanx style="verb">YYYY-MM-DD</spanx> --&gt; the publication date of this draft</t>
            </list>
          </t>
          <t>The following two Appendix sections are to be removed prior to publication:
            <list  style="symbols">
              <t>Appendix B.  Change Log</t>
              <t>Appendix C.  Open Issues</t>
            </list>
          </t>
        </note>
    </front>
    <middle>

        <section title="Introduction">
            <t>This draft defines a NETCONF <xref target="RFC6241"/> server configuration
            data model and a RESTCONF <xref target="draft-ietf-netconf-restconf"/>
            server configuration data model.  These data models enable configuration of 
            the NETCONF and RESTCONF services themselves, including which transports are
            supported, what ports the servers listen on, call-home parameters, client
            authentication, and other related configuration parameters.</t>
            <section title="Terminology">
              <t>The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL",
              "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
              and "OPTIONAL" in this document are to be interpreted as
              described in RFC 2119 <xref target="RFC2119"/>.</t>
            </section>
            <section title="Tree Diagrams">
            <t>A simplified graphical representation of the data models
            is used in this document.  The meaning of the symbols in
            these diagrams is as follows:
              <list style="symbols">
                <t>Brackets "[" and "]" enclose list keys.</t>
                <t>Braces "{" and "}" enclose feature names, and indicate
                that the named feature must be present for the subtree
                to be present.</t>
                <t>Abbreviations before data node names: "rw" means
                configuration (read-write) and "ro" state data 
                (read-only).</t>
                <t>Symbols after data node names: "?" means an optional
                node, "!" means a presence container, and "*" denotes a
                list and leaf-list.</t>
                <t>Parentheses enclose choice and case nodes, and case
                nodes are also marked with a colon (":").</t>
                <t>Ellipsis ("...") stands for contents of subtrees that
                are not shown.</t>
              </list>
            </t>
            </section>
        </section>

        <section title="Objectives">
          <t>The primary purpose of the YANG modules defined herein is
          to enable the configuration of the NETCONF and RESTCONF
          services on a network element.  This scope includes the following 
          objectives:</t>
          <section title="Support all NETCONF and RESTCONF transports">
            <t>The YANG module should support all current NETCONF and RESTCONF
            transports, namely NETCONF over SSH <xref target="RFC6242"/>, 
            NETCONF over TLS <xref target="RFC7589"/>, and RESTCONF over
            TLS <xref target="draft-ietf-netconf-restconf"/>, and to be 
            extensible to support future transports as necessary.</t>
            <t>Because implementations may not support all transports,
            the module should use YANG &quot;feature&quot; statements
            so that implementations can accurately advertise which
            transports are supported.</t>
          </section>
          <section title="Enable each transport to select which keys to use">
            <t>Servers may have a multiplicity of host-keys or server-certificates
               from which subsets may be selected for specific uses.  For instance,
               a NETCONF server may want to use one set of SSH host-keys when listening
               on port 830, and a different set of SSH host-keys when calling
               home.  The data models provided herein should enable configuration
               of which keys to use on a per-use basis.</t>
          </section>
          <section title="Support authenticating NETCONF/RESTCONF clients certificates">
            <t>When a certificate is used to authenticate a NETCONF or RESTCONF client,
               there is a need to configure the server to know how to authenticate the 
               certificates.  The server should be able to authenticate the client's
               certificate either by using path-validation to a configured trust anchor
               or by matching the client-certificate to one previously configured.</t>
          </section>
          <section title="Support mapping authenticated NETCONF/RESTCONF client certificates to usernames">
            <t>When a client certificate is used for TLS client authentication,
               the NETCONF/RESTCONF server must be able to derive a username from the 
               authenticated certificate.  Thus the modules defined herein should enable
               this mapping to be configured.</t>
          </section>
          <section title="Support both listening for connections and call home">
            <t>The NETCONF and RESTCONF protocols were originally defined as having the 
            server opening a port to listen for client connections.  More recently
            the NETCONF working group defined support for call-home 
            (<xref target="draft-ietf-netconf-call-home"/>), enabling the server to
            initiate the connection to the client, for both the NETCONF and RESTCONF
            protocols.  Thus the modules defined herein should enable configuration
            for both listening for connections and calling home.
            Because implementations may not support both listening for
            connections and calling home, YANG &quot;feature&quot; statements
            should be used so that implementation can accurately 
            advertise the connection types it supports.</t>
          </section>
          <section title="For Call Home connections">
            <t>The following objectives only pertain to call home connections.</t>
            <section title="Support more than one NETCONF/RESTCONF client">
              <t>A NETCONF/RESTCONF server may be managed by more than one
              NETCONF/RESTCONF client.  For instance, a deployment may have one
              client for provisioning and another for fault
              monitoring.  Therefore, when it is desired for a server
              to initiate call home connections, it should be able to
              do so to more than one client.</t>
            </section>
            <section title="Support NETCONF/RESTCONF clients having more than one endpoint">
              <t>An NETCONF/RESTCONF client managing a NETCONF/RESTCONF server may implement a 
              high-availability strategy employing a multiplicity of
              active and/or passive endpoint.  Therefore, when it is
              desired for a server to initiate call home connections,
              it should be able to connect to any of the client's endpoints.</t>
            </section>
            <section title="Support a reconnection strategy">
              <t>Assuming a NETCONF/RESTCONF client has more than one endpoint, then
              it becomes necessary to configure how a NETCONF/RESTCONF server should
              reconnect to the client should it lose its connection to one the client's
              endpoints.  For instance, the NETCONF/RESTCONF server may start with 
              first endpoint defined in a user-ordered list of endpoints or with thei
              last endpoints it was connected to.</t>
            </section>
            <section title="Support both persistent and periodic connections">
              <t>NETCONF/RESTCONF clients may vary greatly on how frequently they
              need to interact with a NETCONF/RESTCONF server, how responsive
              interactions need to be, and how many simultaneous connections
              they can support.  Some clients may need a persistent
              connection to servers to optimize real-time interactions, 
              while others prefer periodic interactions in order to minimize
              resource requirements.  Therefore, when it is necessary
              for server to initiate connections, it should be configurable
              if the connection is persistent or periodic.</t>
            </section>
            <section title="Reconnection strategy for periodic connections">
              <t>The reconnection strategy should apply to both 
              persistent and periodic connections.  How it
              applies to periodic connections becomes clear when
              considering that a periodic "connection" is
              a logical connection to a single server.  That is,
              the periods of unconnectedness are intentional as 
              opposed to due to external reasons.  A periodic
              "connection" should always reconnect to 
              the same server until it is no longer able to, at 
              which time the reconnection strategy guides how to
              connect to another server.</t>
            </section>
            <section anchor="keepalives" title="Keep-alives for persistent connections">
              <t>If a persistent connection is desired, it is the 
              responsibility of the connection initiator to actively
              test the "aliveness" of the connection.  The connection
              initiator must immediately work to reestablish a 
              persistent connection as soon as the connection is
              lost.  How often the connection should be tested is
              driven by NETCONF/RESTCONF client requirements, and therefore
              keep-alive settings should be configurable on a 
              per-client basis.</t>
            </section>
            <section title="Customizations for periodic connections">
              <t>If a periodic connection is desired, it is necessary for the
              NETCONF/RESTCONF server to know how often it should connect.  This
              frequency determines the maximum amount of time a NETCONF/RESTCONF
              client may have to wait to send data to a server.  A server may
              connect to a client before this interval expires if desired
              (e.g., to send data to a client).</t>
            </section>
          </section>
        </section>

        <section title="The NETCONF Server Model">
          <section title="Tree Diagram">
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-netconf-server-tree.txt)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="Example Usage">
            <section title="Configuring SSH Transport">
              <t>
                The following example illustrates the &lt;get&gt; response from a NETCONF server
                that only supports SSH, both listening for incoming connections as well as 
                calling home to a single NETCONF/RESTCONF client having two endpoints. 
              </t>
              <t>
                <figure>
                  <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-netconf-ssh.xml)
]]></artwork>
                </figure>
              </t>
            </section>
  
            <section title="Configuring TLS Transport">
              <t>
                The following example illustrates the &lt;get&gt; response from a NETCONF server
                that only supports TLS, both listening for incoming connections as well as 
                calling home to a single NETCONF/RESTCONF client having two endpoints.  Please note also
                the configurations for authenticating client certificates and mappings
                authenticated certificates to NETCONF user names.
              </t>
              <t>
                <figure>
                  <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-netconf-tls.xml)
]]></artwork>
                </figure>
              </t>
            </section>
          </section>

          <section title="YANG Model" anchor="netconf-yang-module">
            <t>This YANG module imports YANG types from <xref
            target="RFC6991"/> and <xref target="RFC7407"/>.</t>
            <t>
              <figure>
                <artwork><![CDATA[

<CODE BEGINS> file "ietf-netconf-server@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(ietf-netconf-server@YYYY-MM-DD.yang)

<CODE ENDS>
]]></artwork>
              </figure>
            </t>
          </section>
        </section>


<!--
              <t>The above subtree illustrates how the ietf-netconf-server YANG module
              enables configuration for listening for remote connections,
              as described in <xref target="RFC6242"/> and 
              <xref target="RFC7589"/>.  "feature" statements are used to limit both
              if listening is supported at all as well as for which transports.
              If listening for connections is supported, then the model 
              enables configuring a list of listening endpoints, each 
              configured with a
              user-specified name (the key field), the transport to use 
              (i.e. SSH, TLS), and the IP address and port to listen on.
              The port field is optional, defaulting to the transport-specific
              port when not configured.
              Please see the YANG module (<xref target="netconf-yang-module"/>)
              for a complete description of these configuration knobs.</t>


              <t>The above subtree illustrates how the ietf-netconf-server YANG module
              enables configuration for call home, as described in 
              <xref target="draft-ietf-netconf-call-home"/>.  Feature 
              statements are used to limit both if call-home is supported
              at all as well as for which transports, if it is.  If call-home
              is supported, then the model supports configuring a list of
              NETCONF/RESTCONF clients to connect to.  Each NETCONF/RESTCONF client is configured
              with a user-specified name (the key field), the transport to
              be used (i.e. SSH, TLS), and a list of remote endpoints, each
              having a name, an IP address, and an optional port.  Additionally,
              the configuration for each remote NETCONF/RESTCONF client indicates the
              connection-type (persistent vs. periodic) and associated 
              parameters, as well as the reconnection strategy to use.
              Please see the YANG module (<xref target="netconf-yang-module"/>)
              for a complete description of these configuration knobs.</t>


              <t>The above subtree illustrates how the ietf-netconf-server YANG module
              enables some SSH configuration independent of if the NETCONF
              server is listening or calling home.  Specifically, when
              ssh-x509-certs feature is supported, this data model provides an ability
              to configure how client-certificates are authenticated.
              Please see the YANG module (<xref target="netconf-yang-module"/>)
              for a complete description of these configuration knobs.</t>


              <t>The above subtree illustrates how the ietf-netconf-server YANG module
              enables TLS configuration independent of if the NETCONF 
              server is listening or calling home.  Specifically, this 
              data-model provides 1) an ability to configure how 
              client-certificates are authenticated and 2) how authenticated
              client-certificates are mapped to NETCONF user names.
              Please see the YANG module (<xref target="netconf-yang-module"/>)
              for a complete description of these configuration knobs.</t>

-->


        <section title="The RESTCONF Server Model">
          <section title="Tree Diagram">
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-restconf-server-tree.txt)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="Example Usage">
            <section title="Configuring TLS Transport">
              <t>
                The following example illustrates the &lt;get&gt; response from a RESTCONF server
                that only supports TLS, both listening for incoming connections as well as 
                calling home to a single RESTCONF client having two endpoints.
              </t>
              <t>
                <figure>
                  <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-restconf-tls.xml)
]]></artwork>
                </figure>
              </t>
            </section>
          </section>

          <section title="YANG Model" anchor="restconf-yang-module">
            <t>This YANG module imports YANG types from <xref
            target="RFC6991"/> and <xref target="RFC7407"/>.</t>
            <t>
              <figure>
                <artwork><![CDATA[

<CODE BEGINS> file "ietf-restconf-server@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(ietf-restconf-server@YYYY-MM-DD.yang)

<CODE ENDS>
]]></artwork>
              </figure>
            </t>
          </section>
        </section>


<!--
              <t>The above subtree illustrates how the ietf-restconf-server YANG module
              enables configuration for listening for remote connections,
              as described in <xref target="draft-ietf-netconf-restconf"/>.
              "feature" statements are used to limit both
              if listening is supported at all as well as for which transports.
              If listening for connections is supported, then the model 
              enables configuring a list of listening endpoints, each 
              configured with a
              user-specified name (the key field), the transport to use 
              (i.e. TLS), and the IP address and port to listen on.
              The port field is optional, defaulting to the transport-specific
              port when not configured.
              Please see the YANG module (<xref target="restconf-yang-module"/>)
              for a complete description of these configuration knobs.</t>


              <t>The above subtree illustrates how the ietf-restconf-server YANG module
              enables configuration for call home, as described in 
              <xref target="draft-ietf-netconf-call-home"/>.  Feature 
              statements are used to limit both if call-home is supported
              at all as well as for which transports, if it is.  If call-home
              is supported, then the model supports configuring a list of
              RESTCONF clients to connect to.  Each RESTCONF client is configured
              with a user-specified name (the key field), the transport to
              be used (i.e. TLS), and a list of remote endpoints, each
              having a name, an IP address, and an optional port.  Additionally,
              the configuration for each remote RESTCONF client indicates the
              connection-type (persistent vs. periodic) and associated 
              parameters, as well as the reconnection strategy to use.
              Please see the YANG module (<xref target="restconf-yang-module"/>)
              for a complete description of these configuration knobs.</t>


              <t>The above subtree illustrates how the ietf-restconf-server YANG module
              enables configuration of client-certificate authentication.  Specifically,
              this data-model provides 1) an ability to configure how client-certificates
              are authenticated and 2) how authenticated client-certificates are mapped
              to RESTCONF user names.  Please see the YANG module 
              (<xref target="restconf-yang-module"/>) for a complete description of 
              these configuration knobs.</t>
-->

        <section title="Security Considerations">
<!--
            <t>A denial of service attack may occur if the NETCONF server's configuration
            limits the maximum number of NETCONF sessions it will accept (i.e. 
            "max-sessions" is not zero) and either the "hello-timeout"
            or "idle-timeout" values indicate the NETCONF server should wait forever
            (i.e. set to zero).  As this attack can only occur after client authentication,
            it is not 
-->
            <t>There are a number of data nodes defined in the 
            "ietf-netconf-server" YANG module which are readable and/or 
            writable that may be considered sensitive or vulnerable in some 
            network environments.  Write and read operations to
            these data nodes can have a negative effect on network
            operations.  It is thus important to control write
            and read access to these data nodes.  Below are the 
            data nodes and their sensitivity/vulnerability.</t>

            <t>netconf-server/tls/client-auth/trusted-ca-certs:
            <list style="symbols">
              <t>This container contains certificates that a NETCONF server
              is to use as trust anchors for authenticating X.509-based
              client certificates.  Write access to this node is
              protected using an nacm:default-deny-write statement.</t>
            </list>
            </t>

            <t>netconf-server/tls/client-auth/trusted-client-certs:
            <list style="symbols">
              <t>This container contains certificates that a NETCONF server
              is to trust directly when authenticating X.509-based
              client certificates.  Write access to this node is
              protected using an nacm:default-deny-write statement.</t>
            </list>
            </t>

            <t>restconf-server/tls/client-auth/trusted-ca-certs:
            <list style="symbols">
              <t>This container contains certificates that a RESTCONF server
              is to use as trust anchors for authenticating X.509-based
              client certificates.  Write access to this node is
              protected using an nacm:default-deny-write statement.</t>
            </list>
            </t>

            <t>restconf-server/tls/client-auth/trusted-client-certs:
            <list style="symbols">
              <t>This container contains certificates that a RESTCONF server
              is to trust directly when authenticating X.509-based
              client certificates.  Write access to this node is
              protected using an nacm:default-deny-write statement.</t>
            </list>
            </t>

        </section>

        <section title="IANA Considerations">
          <t>This document registers two URIs in the IETF XML 
          registry <xref target="RFC2119"/>.  Following the format in 
          <xref target="RFC3688"/>, the following registrations are
          requested:</t>
          <t>
            <figure>
                <artwork><![CDATA[
   URI: urn:ietf:params:xml:ns:yang:ietf-netconf-server
   Registrant Contact: The NETCONF WG of the IETF.
   XML: N/A, the requested URI is an XML namespace.

   URI: urn:ietf:params:xml:ns:yang:ietf-restconf-server
   Registrant Contact: The NETCONF WG of the IETF.
   XML: N/A, the requested URI is an XML namespace.
]]></artwork>
            </figure>
          </t>
          <t>This document registers two YANG modules in the
          YANG Module Names registry <xref target="RFC6020"/>.
          Following the format in <xref target="RFC6020"/>, the
          the following registrations are requested:</t>
          <t>
            <figure>
                <artwork><![CDATA[
   name:         ietf-netconf-server
   namespace:    urn:ietf:params:xml:ns:yang:ietf-netconf-server
   prefix:       ncserver
   reference:    RFC VVVV

   name:         ietf-restconf-server
   namespace:    urn:ietf:params:xml:ns:yang:ietf-restconf-server
   prefix:       rcserver
   reference:    RFC VVVV
]]></artwork>
            </figure>
          </t>
        </section>

        <section title="Other Considerations">
            <t>The YANG modules define herein do not themselves support
            virtual routing and forwarding (VRF).  It is expected that
            external modules will augment in VRF designations when needed.</t>
        </section>

        <section title="Acknowledgements">
          <t>The authors would like to thank for following for
          lively discussions on list and in the halls (ordered
          by last name): Andy Bierman, Martin Bjorklund, Benoit Claise,
          Mehmet Ersue, David Lamparter, Alan Luchuk, Ladislav Lhotka,
          Radek Krejci, Tom Petch, Phil Shafer, and Bert Wijnen.</t>
         <t>
           Juergen Schoenwaelder and was partly funded by Flamingo, a
           Network of Excellence project (ICT-318488) supported by the
           European Commission under its Seventh Framework Programme.
         </t>
       </section>

    </middle>

    <back>
      <references title="Normative References">
         &rfc2119;
         &rfc4253;
         &rfc6020;
         &rfc6187;
         &rfc6241;
         &rfc6242;
         &rfc6536;
         &rfc6991;
         &rfc7407;
         &rfc7589;
         <reference anchor='draft-ietf-netconf-call-home'>
           <front>
             <title>
               NETCONF Call Home and RESTCONF Call Home
             </title>
             <author initials='K.W.' surname='Watsen'
                fullname='Kent Watsen'>
               <organization>Juniper Networks</organization>
             </author>
             <date year='2014' />
           </front>
           <seriesInfo name='Internet-Draft'
                  value='draft-ieft-netconf-call-home-02' />
         </reference>
         <reference anchor='draft-ietf-netconf-restconf'>
           <front>
             <title>RESTCONF Protocol</title>
             <author initials='A.B.' surname='Bierman'
                fullname='Andy Bierman'>
               <organization>YumaWorks</organization>
             </author>
             <author initials='M' surname='Bjorklund' 
                fullname='Martin Bjorklund'>
               <organization>Tail-f Systems</organization>
             </author>
             <author initials='K.W.' surname='Watsen'
                fullname='Kent Watsen'>
               <organization>Juniper Networks</organization>
             </author>
             <date year='2014' />
           </front>
           <seriesInfo name='Internet-Draft'
                  value='draft-ieft-netconf-restconf-04' />
        </reference>
      </references>
      <references title="Informative References">

        <reference anchor="RFC3688">
          <front>
            <title>The IETF XML Registry</title>
            <author initials="M.M." surname="Mealling"
                    fullname="Michael Mealling">
              <organization>VeriSign Inc.</organization>
            </author>
            <date month="January" year="2004" />
          </front>
          <seriesInfo name="BCP" value="81" />
          <seriesInfo name="RFC" value="3688"/>
        </reference>
      </references>
      
      <section title="Alternative solution addressing Issue #49">
        <t>Option #4 for Issue #49 proposed to define configuration for
        a keychain and on-going discussion proposed to create reusable
        groupings for SSH/TLS servers (referencing keys and certificates
        held in the keychain) that the NETCONF/RESTCONF servers would
        uses.   This relationship is illustrated by the diagram below.</t>
        <t>
              <figure>
                <artwork><![CDATA[
                  +-------------+                 
                  |ietf-keychain|                 
                  +-------------+                 
                      ^    ^
                      |    |
           <leafref>  |    |  <leafref>
         +------------+    +------------+ 
         |                              |
  +---------------+            +------------------+ 
  |ietf-ssh-server|            | ietf-tls-server  | 
  +---------------+            +------------------+
    ^                               ^       ^      
    | <uses>                        |       |      
    |            <augments>         |       |      
    |          +--------------------+       | <augments>     
    |          |                            |      
+-------------------+         +--------------------+
|ietf-netconf-server|         |ietf-restconf-server|
+-------------------+         +--------------------+
]]></artwork>
              </figure>
        </t>
        <t>The following sections each of the five YANG modules above.</t>

        <section title="The Keychain Model">
          <section title="Tree Diagram">
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-keychain-tree.txt)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="Example Usage">
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keychain.xml)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="YANG Model" anchor="keychain-yang-module">
<!--
            <t>This YANG module imports YANG types from <xref
            target="RFC6991"/> and <xref target="RFC7407"/>.</t>
-->
            <t>
              <figure>
                <artwork><![CDATA[

<CODE BEGINS> file "ietf-keychain@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(ietf-keychain@YYYY-MM-DD.yang)

<CODE ENDS>
]]></artwork>
              </figure>
            </t>
          </section>
        </section>


        <section title="The SSH Server Model">
          <section title="Tree Diagram">
            <t>The following tree diagram is faked, as a module having only a grouping in it has no 
            tree diagram.  However, for illustrative purposes, a container has been added as
            nothing more than a "uses" statement of the grouping.</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-ssh-server-tree.txt)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="Example Usage">
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-ssh-server-fake.xml)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="YANG Model" anchor="ssh-server-yang-module">
<!--
            <t>This YANG module imports YANG types from <xref
            target="RFC6991"/> and <xref target="RFC7407"/>.</t>
-->
            <t>
              <figure>
                <artwork><![CDATA[

<CODE BEGINS> file "ietf-ssh-server@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(ietf-ssh-server@YYYY-MM-DD.yang)

<CODE ENDS>
]]></artwork>
              </figure>
            </t>
          </section>
        </section>

        <section title="The TLS Server Model">
          <section title="Tree Diagram">
            <t>The following tree diagram is faked, as a module having only a grouping in it has no 
            tree diagram.  However, for illustrative purposes, a container has been added as
            nothing more than a "uses" statement of the grouping.</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-tls-server-tree.txt)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="Example Usage">
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-tls-server-fake.xml)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="YANG Model" anchor="tls-server-yang-module">
<!--
            <t>This YANG module imports YANG types from <xref
            target="RFC6991"/> and <xref target="RFC7407"/>.</t>
-->
            <t>
              <figure>
                <artwork><![CDATA[

<CODE BEGINS> file "ietf-tls-server@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(ietf-tls-server@YYYY-MM-DD.yang)

<CODE ENDS>
]]></artwork>
              </figure>
            </t>
          </section>
        </section>

        <section title="The NETCONF Server Model">
          <section title="Tree Diagram">
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-netconf-server-new-tree.txt)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="Example Usage">
            <t>Configuring an SSH Server</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-netconf-ssh-new.xml)
]]></artwork>
              </figure>
            </t>
            <t>Configuring a TLS Server</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-netconf-tls-new.xml)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="YANG Model" anchor="netconf-new-yang-module">
            <t>This YANG module imports YANG types from <xref
            target="RFC6991"/> and <xref target="RFC7407"/>.</t>
            <t>
              <figure>
                <artwork><![CDATA[

<CODE BEGINS> file "ietf-netconf-server-new@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(ietf-netconf-server-new@YYYY-MM-DD.yang)

<CODE ENDS>
]]></artwork>
              </figure>
            </t>
          </section>
        </section>

        <section title="The RESTCONF Server Model">
          <section title="Tree Diagram">
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-restconf-server-new-tree.txt)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="Example Usage">
            <t>TBD</t>
          </section>

          <section title="YANG Model" anchor="restconf-new-yang-module">
            <t>This YANG module imports YANG types from <xref
            target="RFC6991"/> and <xref target="RFC7407"/>.</t>
            <t>
              <figure>
                <artwork><![CDATA[

<CODE BEGINS> file "ietf-restconf-server-new@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(ietf-restconf-server-new@YYYY-MM-DD.yang)

<CODE ENDS>
]]></artwork>
              </figure>
            </t>
          </section>
        </section>

      </section>

      <section title="Change Log">
        <section title="00 to 01">
          <t>
            <list style="symbols">
              <t>Restructured document so it flows better</t>
              <t>Added trusted-ca-certs and trusted-client-certs
                 objects into the ietf-system-tls-auth module</t>
            </list>
          </t>
        </section>
        <section title="01 to 02">
          <t>
            <list style="symbols">
              <t>removed the "one-to-many" construct</t>
              <t>removed "address" as a key field</t>
              <t>removed "network-manager" terminology</t>
              <t>moved open issues to github issues</t>
              <t>brought TLS client auth back into model</t>
            </list>
          </t>
        </section>
        <section title="02 to 03">
          <t>
            <list style="symbols">
              <t>fixed tree diagrams and surrounding text</t>
            </list>
          </t>
        </section>
        <section title="03 to 04">
          <t>
            <list style="symbols">
              <t>reduced the number of grouping statements</t>
              <t>removed psk-maps and associated feature statements</t>
              <t>added ability for listen/call-home instances to specify
                 which host-keys/certificates (of all listed) to use</t>
              <t>clarified that last-connected should span reboots</t>
              <t>added missing "objectives" for selecting which keys to use,
                 authenticating client-certificates, and mapping authenticated
                 client-certificates to usernames</t>
              <t>clarified indirect client certificate authentication</t>
              <t>added keep-alive configuration for listen connections</t>
              <t>added global-level NETCONF session parameters</t>
            </list>
          </t>
        </section>
        <section title="04 to 05">
          <t>
            <list style="symbols">
              <t>Removed all refs to the old ietf-system-tls-auth module</t>
              <t>Removed YANG 1.1 style if-feature statements (loss some expressiveness)</t>
              <t>Removed the read-only (config false) lists of SSH host-keys and TLS certs</t>
              <t>Added an if-feature around session-options container</t>
              <t>Added ability to configure trust-anchors for SSH X.509 client certs</t>
              <t>Now imports by revision, per best practice</t>
              <t>Added support for RESTCONF server</t>
              <t>Added RFC Editor instructions</t>
            </list>
          </t>
        </section>
        <section title="05 to 06">
          <t>
            <list style="symbols">
              <t>Removed feature statement on the session-options container (issue #21).</t>
              <t>Added NACM statements to YANG modules for sensitive nodes (issue #24).</t>
              <t>Fixed default RESTCONF server port value to be 443 (issue #26).</t>
              <t>Added client-cert-auth subtree to ietf-restconf-server module (issue #27).</t>
              <t>Updated draft-ietf-netmod-snmp-cfg reference to RFC 7407 (issue #28).</t>
              <t>Added description statements for groupings (issue #29).</t>
              <t>Added description for braces to tree diagram section (issue #30).</t>
              <t>Renamed feature from "rfc6187" to "ssh-x509-certs" (issue #31).</t>
            </list>
          </t>
        </section>
        <section title="06 to 07">
          <t>
            <list style="symbols">
              <t>Replaced "application" with "NETCONF/RESTCONF client" (issue #32).</t>
              <t>Reverted back to YANG 1.1 if-feature statements (issue #34).</t>
              <t>Removed import by revisions (issue #36).</t>
              <t>Removed groupings only used once (issue #37).</t>
              <t>Removed upper-bound on hello-timeout, idle-timeout, and max-sessions (issue #38).</t>
              <t>Clarified that when no listen address is configured, the 
                 NETCONF/RESTCONF server will listen on all addresses (issue #41).</t>
              <t>Update keep-alive reference to new section in Call Home draft (issue #42).</t>
              <t>Modified connection-type/persistent/keep-alives/interval-secs default value,
                 removed the connection-type/periodic/linger-secs node, and also removed the
                 reconnect-strategy/interval-secs node (issue #43).</t>
              <t>Clarified how last-connected reconnection type should work across reboots (issue #44).</t>
              <t>Clarified how DNS-expanded hostnames should be processed (issue #45).</t>
              <t>Removed text on how to implement keep-alives (now in the call-home draft)
                 and removed the keep-alive configuration for listen connections (issue #46).</t>
              <t>Clarified text for .../periodic-connection/timeout-mins (issue #47).</t>
              <t>Fixed description on the "trusted-ca-certs" leaf-list (issue #48).</t>
              <t>Added optional keychain-based solution in appendix A (issue #49).</t>
              <t>Fixed description text for the interval-secs leaf (issue #50).</t>
              <t>moved idle-time into the listen, persistent, and periodic subtrees (issue #51).</t>
              <t>put presence statements on containers where it makes sense (issue #53).</t>
            </list>
          </t>
        </section>
      </section>
      <section title="Open Issues">
        <t>Please see: https://github.com/netconf-wg/server-model/issues.</t>
      </section>
    </back>
</rfc>

